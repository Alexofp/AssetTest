[gd_scene load_steps=16 format=3 uid="uid://dnarwr68ysgik"]

[ext_resource type="PackedScene" uid="uid://bdr7rn7vpdopq" path="res://Mesh/Parts/Head/HumanFeminine/MyHumanHead.glb" id="1_ab4oe"]
[ext_resource type="Script" uid="uid://c4lbfd4esakpr" path="res://Mesh/Parts/Head/HumanFeminine/my_human_head.gd" id="2_l4a0u"]
[ext_resource type="Script" uid="uid://b17qxyq8oh4kq" path="res://Game/Doll/doll_attach_to.gd" id="3_pdg8m"]
[ext_resource type="Script" uid="uid://bk8a3rmejmdn" path="res://Mesh/Materials/MyBodyMat/MyMasterBodyMat.gd" id="5_wsgtv"]
[ext_resource type="Texture2D" uid="uid://cvaiqtu6j2dk8" path="res://Mesh/Parts/Head/HumanFeminine/Textures/HumanSkin/MyHumanHeadV2_low_Face_BaseColor.png" id="6_k178j"]
[ext_resource type="Texture2D" uid="uid://cq0hn1n6r44g1" path="res://Mesh/Parts/Head/HumanFeminine/Textures/HumanSkin/MyHumanHeadV2_low_Face_Normal.png" id="7_l4a0u"]
[ext_resource type="Texture2D" uid="uid://jmf43x40vgxe" path="res://Mesh/Parts/Head/HumanFeminine/Textures/HumanSkin/MyHumanHeadV2_low_Face_ORM.png" id="8_pdg8m"]
[ext_resource type="Material" uid="uid://c2hc7l0jpere0" path="res://Mesh/Parts/SharedMaterials/EyeBrowsMat.tres" id="10_o81br"]
[ext_resource type="Material" uid="uid://13wriie643e5" path="res://Mesh/Parts/SharedMaterials/EyelashesMat.tres" id="11_o81br"]
[ext_resource type="Material" uid="uid://bit1p64srkgtb" path="res://Mesh/Parts/Head/HumanFeminine/Materials/HumanMouthMat.tres" id="12_k178j"]
[ext_resource type="Material" uid="uid://crsv57v2tbwqk" path="res://Mesh/Parts/SharedMaterials/EyeMat.tres" id="12_l4a0u"]
[ext_resource type="Texture2D" uid="uid://d0fgasbp7nt7d" path="res://Mesh/Parts/SharedTextures/DetailMaps/SkinMicroDetailN.jpg" id="13_pdg8m"]
[ext_resource type="PackedScene" uid="uid://3omr6ntpyb48" path="res://Game/Doll/doll_attach_point.tscn" id="16_o81br"]

[sub_resource type="Shader" id="Shader_k178j"]
code = "shader_type spatial;

#define MY_BACKLIGHT
#define MY_FRESHNEL
#define MY_RIMLIGHT
#define MY_SUBSURFACESCATTER
#define MY_GLOBALDETAILMAP


render_mode
blend_mix,
#ifdef MY_ALPHASUPPORT
depth_prepass_alpha,
#endif
depth_draw_opaque,
#ifdef MY_TOONSHADING
diffuse_toon,
#else
diffuse_burley,
#endif
specular_schlick_ggx,
#ifdef MY_SUBSURFACESCATTER
sss_mode_skin,
#endif
#ifdef MY_DOUBLESIDED
cull_disabled
#else
cull_back
#endif
;

uniform vec4 albedo : source_color = vec4(1.0);
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform sampler2D texture_orm : hint_roughness_g, filter_linear_mipmap, repeat_enable;

uniform float roughness : hint_range(0.0, 1.0) = 1.0;

uniform float specular : hint_range(0.0, 1.0, 0.01) = 0.5;
uniform float metallic : hint_range(0.0, 1.0, 0.01) = 1.0;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0) = 1.0;

#ifdef MY_ALPHAMASK
uniform sampler2D texture_alpha : hint_default_black, filter_nearest, repeat_enable;
uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.001) = 0.5;
#endif

#ifdef MY_RIMLIGHT
uniform float rim : hint_range(0.0, 3.0, 0.01) = 1.0;
uniform float rim_tint : hint_range(0.0, 1.0, 0.01) = 0.5;
//uniform sampler2D texture_rim : hint_default_white, filter_linear_mipmap, repeat_enable;
#endif

uniform float ao_light_affect : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform float ao_mult : hint_range(0.0, 1.0, 0.01) = 1.0;

#ifdef MY_SUBSURFACESCATTER
uniform float subsurface_scattering_strength : hint_range(0.0, 1.0, 0.01) = 0.5;
//uniform sampler2D texture_subsurface_scattering : hint_default_white, filter_linear_mipmap, repeat_enable;
#endif

#ifdef MY_BACKLIGHT
uniform vec4 backlight : source_color = vec4(0.3, 0.24, 0.24, 1.0);
//uniform sampler2D texture_backlight : hint_default_black, filter_linear_mipmap, repeat_enable;
#endif

uniform vec3 uv1_scale = vec3(1.0, 1.0, 1.0);
uniform vec3 uv1_offset = vec3(0.0);
//uniform vec3 uv2_scale = vec3(1.0, 1.0, 1.0);
//uniform vec3 uv2_offset = vec3(0.0);

#ifdef MY_FRESHNEL
uniform float freshnel_width : hint_range(0.0, 30.0, 0.1) = 5.0;
uniform float freshnel_mod : hint_range(0.0, 0.3, 0.01) = 0.1;
uniform vec3 freshnel_color : source_color = vec3(0.05,0.02,0.02);

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view))-freshnel_mod, 0.0, 1.0 )), amount);
}
#endif

//#define MY_COLORMASK
#ifdef MY_COLORMASK
uniform sampler2D texture_color_mask : hint_default_transparent, filter_linear_mipmap, repeat_enable;
uniform vec4 color_mask_r : source_color = vec4(1.0, 0.0, 0.0, 1.0);
uniform vec4 color_mask_g : source_color = vec4(0.0, 1.0, 0.0, 1.0);
uniform vec4 color_mask_b : source_color = vec4(0.0, 0.0, 1.0, 1.0);
#endif

//#define MY_GLOBALDETAILROUGHMAP
#ifdef MY_GLOBALDETAILROUGHMAP
uniform sampler2D texture_detail_rough_global : hint_roughness_b, filter_linear_mipmap, repeat_enable;
uniform float detail_rough_scale : hint_range(0.01, 100.0, 0.01) = 1.0;
uniform float detail_rough_blend : hint_range(0.01, 3.0, 0.01) = 1.0;

#endif
//#define MY_GLOBALDETAILMAP
#ifdef MY_GLOBALDETAILMAP
uniform sampler2D texture_detail_normal_global : hint_normal, filter_linear_mipmap, repeat_enable;
uniform float detail_normal_scale : hint_range(0.01, 100.0, 0.01) = 1.0;
uniform float detail_normal_blend : hint_range(0.01, 3.0, 0.01) = 1.0;

vec3 _simple_normal_blend(vec3 b, vec3 d) {
	return vec3(b.xy + d.xy - 0.5, 1.0);
}

vec3 udm_normal_blend(vec3 b, vec3 d) {
	b = b*2.0 - 1.0;
	d = d*2.0 - 1.0;
	vec3 r = vec3(b.xy + d.xy, b.z);
	r = normalize(r);
	return r*0.5 + 0.5;
}
#endif

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;

#ifdef MY_UV_BASED_DISCARD
	if(base_uv.y < 0.0)
		discard;
#endif

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	vec4 orm_tex = texture(texture_orm, base_uv);

	ALBEDO = albedo.rgb * albedo_tex.rgb;

#ifdef MY_COLORMASK
	vec4 mask = texture(texture_color_mask, base_uv);
{
	float maskF = mask.r + mask.g + mask.b;
	maskF = max(maskF, 1.0);
	mask.rgb /= maskF;

	vec4 color_r = color_mask_r;
	vec4 color_g = color_mask_g;
	vec4 color_b = color_mask_b;

    vec4 result = vec4(0.0);
	result += mask.r*color_r*color_r.a;
	result += mask.g*color_g*color_g.a;
	result += mask.b*color_b*color_b.a;

	result.a *= mask.a;

	vec4 mask_color = texture(texture_color_mask, base_uv);

	ALBEDO.rgb = mix(ALBEDO.rgb, result.rgb, result.a);

	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_r, mask_color.r);
	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_g, mask_color.g);
	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_b, mask_color.b);
}
#endif

#ifdef MY_FRESHNEL
	// Freshnel: Enabled
	float basic_fresnel = fresnel(freshnel_width, NORMAL, VIEW);
	basic_fresnel = smoothstep(0.0, 1.0, basic_fresnel)*1.0; //0.5 magic number seems to give the most intuitive control
	ALBEDO = mix(ALBEDO, freshnel_color, basic_fresnel);// - basic_fresnel;
#endif

	METALLIC = orm_tex.b * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	ROUGHNESS = orm_tex.g * roughness;

#ifdef MY_COLORMASK
#ifdef MY_EYEMODE
	ROUGHNESS *= min(1.0 - mask.g*0.9, 1.0);
	EMISSION = albedo_tex.rgb*color_mask_g.rgb*mask.g;
	EMISSION.rgb = mix(EMISSION.rgb, albedo_tex.rgb*color_mask_r.rgb, mask.r*0.5);
	//EMISSION.rgb *= 2.0;
#endif
#endif

	// Normal Map: Enabled
	NORMAL_MAP = texture(texture_normal, base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

#ifdef MY_RIMLIGHT
	// Rim: Enabled
	//vec2 rim_tex = texture(texture_rim, base_uv).xy;
	RIM = rim;// * rim_tex.x;// - basic_fresnel*2.5;
	RIM_TINT = rim_tint;// * rim_tex.y;
#endif

	// Ambient Occlusion: Enabled
	AO = orm_tex.r * ao_mult;
	AO_LIGHT_AFFECT = ao_light_affect;

#ifdef MY_SUBSURFACESCATTER
	// Subsurface Scattering: Enabled
	//float sss_tex = texture(texture_subsurface_scattering, base_uv).r;
	SSS_STRENGTH = subsurface_scattering_strength;// * sss_tex;
#endif

#ifdef MY_BACKLIGHT
	// Backlight: Enabled
	//vec3 backlight_tex = texture(texture_backlight, base_uv).rgb;
	BACKLIGHT = (backlight.rgb);// + backlight_tex);
#endif

#ifdef MY_ALPHAMASK
	vec4 alpha_tex = texture(texture_alpha, base_uv);
	ALPHA *= (1.0 - alpha_tex.r);
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
#endif

#ifdef MY_ALPHASUPPORT
	ALPHA *= albedo_tex.a*albedo.a;
#endif

#ifdef MY_GLOBALDETAILMAP
	vec3 detail_norm_tex_global = texture(texture_detail_normal_global, base_uv*detail_normal_scale).rgb; // base_uv
	detail_norm_tex_global = mix(vec3(0.5,0.5,1.0), detail_norm_tex_global, detail_normal_blend);
	NORMAL_MAP = udm_normal_blend(NORMAL_MAP, detail_norm_tex_global); //_simple_normal_blend
#endif

#ifdef MY_GLOBALDETAILROUGHMAP
	vec3 detail_rough_tex_global = texture(texture_detail_rough_global, base_uv*detail_rough_scale).rgb; // base_uv
	detail_rough_tex_global.g = detail_rough_tex_global.g * (detail_rough_blend) + 1.0 - detail_rough_blend;

	//detail_rough_tex_global.rgb = mix(vec3(0.5,0.5,1.0), detail_norm_tex_global, detail_normal_blend);
	//NORMAL_MAP = udm_normal_blend(NORMAL_MAP, detail_norm_tex_global); //_simple_normal_blend
	ROUGHNESS *= detail_rough_tex_global.g;
#endif

}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_hdch2"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_k178j")
shader_parameter/albedo = Color(0.83, 0.779647, 0.7719, 1)
shader_parameter/texture_albedo = ExtResource("6_k178j")
shader_parameter/texture_orm = ExtResource("8_pdg8m")
shader_parameter/roughness = 1.0
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/texture_normal = ExtResource("7_l4a0u")
shader_parameter/normal_scale = 1.0
shader_parameter/rim = 1.75
shader_parameter/rim_tint = 0.5
shader_parameter/ao_light_affect = 0.0
shader_parameter/ao_mult = 0.25
shader_parameter/subsurface_scattering_strength = 0.23
shader_parameter/backlight = Color(0.3, 0.24, 0.24, 1)
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/freshnel_width = 5.0
shader_parameter/freshnel_mod = 0.16
shader_parameter/freshnel_color = Color(0.05, 0.02, 0.02, 1)
shader_parameter/texture_detail_normal_global = ExtResource("13_pdg8m")
shader_parameter/detail_normal_scale = 10.0
shader_parameter/detail_normal_blend = 0.3
script = ExtResource("5_wsgtv")
backlight = true
freshnel = true
rimlight = true
subsurfaceScattering = true
alphaMask = false
uvBasedDiscard = false
alphaSupport = false
globalDetailMask = true
globalDetailRoughMask = false
colorMask = false
eyeMode = false
doubleSided = false
toonShading = false
clearCache = false

[node name="MyHumanHead" instance=ExtResource("1_ab4oe")]
script = ExtResource("2_l4a0u")
eyeMat = ExtResource("12_l4a0u")
headMat = SubResource("ShaderMaterial_hdch2")

[node name="MyHeadRig" parent="." index="0"]
script = ExtResource("3_pdg8m")
attachPoint = "head"

[node name="Skeleton3D" parent="MyHeadRig" index="0"]
bones/1/rotation = Quaternion(6.65569e-08, 0.472048, 0.881573, 3.56386e-08)
bones/7/rotation = Quaternion(-3.69986e-07, 0.954131, 0.299389, -1.32319e-06)
bones/12/position = Vector3(0.0270634, 0.016086, 0.111078)
bones/12/rotation = Quaternion(2.21972e-07, 0.707115, 0.707099, 2.21973e-07)
bones/15/position = Vector3(-0.0270634, 0.016086, 0.111078)
bones/15/rotation = Quaternion(-2.21971e-07, 0.707115, 0.707099, -2.21974e-07)
bones/18/rotation = Quaternion(0.0328977, 0.816189, 0.575459, -0.0400005)
bones/19/rotation = Quaternion(0.0374869, 0.706113, 0.706113, -0.0374845)
bones/20/rotation = Quaternion(0.215068, 0.73971, 0.599092, -0.218321)
bones/22/rotation = Quaternion(0.0458898, 0.688081, 0.723006, -0.041253)
bones/23/rotation = Quaternion(0.361706, 0.590917, 0.647655, -0.317063)
bones/25/rotation = Quaternion(0.0566095, 0.542704, 0.83746, -0.0304603)
bones/26/rotation = Quaternion(0.221366, 0.545657, 0.785492, -0.190413)
bones/33/rotation = Quaternion(0.128182, 0.759858, 0.622904, -0.134817)
bones/36/rotation = Quaternion(0.272675, 0.586205, 0.721745, -0.247175)
bones/39/rotation = Quaternion(0.122184, 0.552973, 0.812069, -0.140843)

[node name="EyeBrows" parent="MyHeadRig/Skeleton3D" index="0"]
surface_material_override/0 = ExtResource("10_o81br")

[node name="Eyelashes" parent="MyHeadRig/Skeleton3D" index="1"]
surface_material_override/0 = ExtResource("11_o81br")

[node name="Eyes" parent="MyHeadRig/Skeleton3D" index="2"]
surface_material_override/0 = ExtResource("12_l4a0u")
surface_material_override/1 = ExtResource("12_l4a0u")

[node name="MouthMesh" parent="MyHeadRig/Skeleton3D" index="3"]
surface_material_override/0 = ExtResource("12_k178j")

[node name="MyHumanHead" parent="MyHeadRig/Skeleton3D" index="4"]
surface_material_override/0 = SubResource("ShaderMaterial_hdch2")

[node name="DollAttachPoint" parent="MyHeadRig/Skeleton3D" index="5" instance=ExtResource("16_o81br")]
pointName = "hair"

[node name="DollAttachPoint2" parent="MyHeadRig/Skeleton3D" index="6" instance=ExtResource("16_o81br")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0547889, 0.153346, 0.00886823)
pointName = "ear.L"

[node name="DollAttachPoint3" parent="MyHeadRig/Skeleton3D" index="7" instance=ExtResource("16_o81br")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.055, 0.153405, 0.009)
pointName = "ear.R"

[node name="DollAttachPoint4" parent="MyHeadRig/Skeleton3D" index="8" instance=ExtResource("16_o81br")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0237597, 0.168494, 0.0774401)
pointName = "horn.L"

[node name="DollAttachPoint5" parent="MyHeadRig/Skeleton3D" index="9" instance=ExtResource("16_o81br")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.024, 0.168, 0.077)
pointName = "horn.R"

[node name="AnimationPlayer" parent="." index="1"]
autoplay = "HeadTPose"
