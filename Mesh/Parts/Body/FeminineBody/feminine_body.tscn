[gd_scene load_steps=20 format=3 uid="uid://ctlxdll74pd6e"]

[ext_resource type="PackedScene" uid="uid://bvc2tbhju26hj" path="res://Mesh/Parts/Body/FeminineBody/FeminineBody.glb" id="1_y7j6w"]
[ext_resource type="Script" uid="uid://ctusa2pckufj3" path="res://Mesh/Parts/Body/FeminineBody/feminine_body.gd" id="2_3rtfg"]
[ext_resource type="Script" uid="uid://b17qxyq8oh4kq" path="res://Game/Doll/doll_attach_to.gd" id="2_i5sai"]
[ext_resource type="Material" uid="uid://c8vrimhqhhto8" path="res://Mesh/Parts/Body/FeminineBody/BodySmartMatTest.tres" id="4_f00mj"]
[ext_resource type="Script" uid="uid://bk8a3rmejmdn" path="res://Mesh/Materials/MyBodyMat/MyMasterBodyMat.gd" id="5_87rsm"]
[ext_resource type="Texture2D" uid="uid://bp8akkr6nye5k" path="res://Mesh/Parts/SharedTextures/Nipples/nippleSmallWhite.png" id="5_fu5fk"]
[ext_resource type="Texture2D" uid="uid://bojwpmm21iiad" path="res://Mesh/Parts/Body/FeminineBody/Textures/Genitals/MyBodyGenitalsSubstancePainter_PussyAnus_BaseColor.png" id="6_e373p"]
[ext_resource type="Texture2D" uid="uid://beno0wktxhj0m" path="res://Mesh/Parts/SharedTextures/PubicHair/cute.png" id="6_urrwb"]
[ext_resource type="Texture2D" uid="uid://c0x6jdd6xefwi" path="res://Mesh/Parts/Body/FeminineBody/Textures/Genitals/MyBodyGenitalsSubstancePainter_PussyAnus_Normal.png" id="7_sj2jt"]
[ext_resource type="Texture2D" uid="uid://boe50shxdmajp" path="res://Mesh/Parts/Body/FeminineBody/Textures/Genitals/MyBodyGenitalsSubstancePainter_PussyAnus_ORM.png" id="8_uprqo"]
[ext_resource type="PackedScene" uid="uid://bgux6rpndyvti" path="res://Mesh/Materials/MyLayeredTexture/my_layered_texture.tscn" id="11_sj2jt"]
[ext_resource type="Script" uid="uid://cagnjeusnic0p" path="res://Mesh/Parts/Body/FeminineBody/HoleTrackerForDoll.gd" id="12_uprqo"]

[sub_resource type="Shader" id="Shader_uprqo"]
code = "shader_type spatial;

#define MY_SUBSURFACESCATTER


render_mode
blend_mix,
#ifdef MY_ALPHASUPPORT
depth_prepass_alpha,
#endif
depth_draw_opaque,
#ifdef MY_TOONSHADING
diffuse_toon,
#else
diffuse_burley,
#endif
specular_schlick_ggx,
#ifdef MY_SUBSURFACESCATTER
sss_mode_skin,
#endif
#ifdef MY_DOUBLESIDED
cull_disabled
#else
cull_back
#endif
;

uniform vec4 albedo : source_color = vec4(1.0);
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform sampler2D texture_orm : hint_roughness_g, filter_linear_mipmap, repeat_enable;

uniform float roughness : hint_range(0.0, 1.0) = 1.0;

uniform float specular : hint_range(0.0, 1.0, 0.01) = 0.5;
uniform float metallic : hint_range(0.0, 1.0, 0.01) = 1.0;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0) = 1.0;

#ifdef MY_ALPHAMASK
uniform sampler2D texture_alpha : hint_default_black, filter_nearest, repeat_enable;
uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.001) = 0.5;
#endif

#ifdef MY_RIMLIGHT
uniform float rim : hint_range(0.0, 3.0, 0.01) = 1.0;
uniform float rim_tint : hint_range(0.0, 1.0, 0.01) = 0.5;
//uniform sampler2D texture_rim : hint_default_white, filter_linear_mipmap, repeat_enable;
#endif

uniform float ao_light_affect : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform float ao_mult : hint_range(0.0, 1.0, 0.01) = 1.0;

#ifdef MY_SUBSURFACESCATTER
uniform float subsurface_scattering_strength : hint_range(0.0, 1.0, 0.01) = 0.5;
//uniform sampler2D texture_subsurface_scattering : hint_default_white, filter_linear_mipmap, repeat_enable;
#endif

#ifdef MY_BACKLIGHT
uniform vec4 backlight : source_color = vec4(0.3, 0.24, 0.24, 1.0);
//uniform sampler2D texture_backlight : hint_default_black, filter_linear_mipmap, repeat_enable;
#endif

uniform vec3 uv1_scale = vec3(1.0, 1.0, 1.0);
uniform vec3 uv1_offset = vec3(0.0);
//uniform vec3 uv2_scale = vec3(1.0, 1.0, 1.0);
//uniform vec3 uv2_offset = vec3(0.0);

#ifdef MY_FRESHNEL
uniform float freshnel_width : hint_range(0.0, 30.0, 0.1) = 5.0;
uniform float freshnel_mod : hint_range(0.0, 0.3, 0.01) = 0.1;
uniform vec3 freshnel_color : source_color = vec3(0.05,0.02,0.02);

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view))-freshnel_mod, 0.0, 1.0 )), amount);
}
#endif

//#define MY_COLORMASK
#ifdef MY_COLORMASK
uniform sampler2D texture_color_mask : hint_default_transparent, filter_linear_mipmap, repeat_enable;
uniform vec4 color_mask_r : source_color = vec4(1.0, 0.0, 0.0, 1.0);
uniform vec4 color_mask_g : source_color = vec4(0.0, 1.0, 0.0, 1.0);
uniform vec4 color_mask_b : source_color = vec4(0.0, 0.0, 1.0, 1.0);
#endif

//#define MY_GLOBALDETAILROUGHMAP
#ifdef MY_GLOBALDETAILROUGHMAP
uniform sampler2D texture_detail_rough_global : hint_roughness_b, filter_linear_mipmap, repeat_enable;
uniform float detail_rough_scale : hint_range(0.01, 100.0, 0.01) = 1.0;
uniform float detail_rough_blend : hint_range(0.01, 3.0, 0.01) = 1.0;

#endif
//#define MY_GLOBALDETAILMAP
#ifdef MY_GLOBALDETAILMAP
uniform sampler2D texture_detail_normal_global : hint_normal, filter_linear_mipmap, repeat_enable;
uniform float detail_normal_scale : hint_range(0.01, 100.0, 0.01) = 1.0;
uniform float detail_normal_blend : hint_range(0.01, 3.0, 0.01) = 1.0;

vec3 _simple_normal_blend(vec3 b, vec3 d) {
	return vec3(b.xy + d.xy - 0.5, 1.0);
}

vec3 udm_normal_blend(vec3 b, vec3 d) {
	b = b*2.0 - 1.0;
	d = d*2.0 - 1.0;
	vec3 r = vec3(b.xy + d.xy, b.z);
	r = normalize(r);
	return r*0.5 + 0.5;
}
#endif

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;

#ifdef MY_UV_BASED_DISCARD
	if(base_uv.y < 0.0)
		discard;
#endif

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	vec4 orm_tex = texture(texture_orm, base_uv);

	ALBEDO = albedo.rgb * albedo_tex.rgb;

#ifdef MY_COLORMASK
	vec4 mask = texture(texture_color_mask, base_uv);
{
	float maskF = mask.r + mask.g + mask.b;
	maskF = max(maskF, 1.0);
	mask.rgb /= maskF;

	vec4 color_r = color_mask_r;
	vec4 color_g = color_mask_g;
	vec4 color_b = color_mask_b;

    vec4 result = vec4(0.0);
	result += mask.r*color_r*color_r.a;
	result += mask.g*color_g*color_g.a;
	result += mask.b*color_b*color_b.a;

	result.a *= mask.a;

	vec4 mask_color = texture(texture_color_mask, base_uv);

	ALBEDO.rgb = mix(ALBEDO.rgb, result.rgb, result.a);

	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_r, mask_color.r);
	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_g, mask_color.g);
	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_b, mask_color.b);
}
#endif

#ifdef MY_FRESHNEL
	// Freshnel: Enabled
	float basic_fresnel = fresnel(freshnel_width, NORMAL, VIEW);
	basic_fresnel = smoothstep(0.0, 1.0, basic_fresnel)*1.0; //0.5 magic number seems to give the most intuitive control
	ALBEDO = mix(ALBEDO, freshnel_color, basic_fresnel);// - basic_fresnel;
#endif

	METALLIC = orm_tex.b * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	ROUGHNESS = orm_tex.g * roughness;

#ifdef MY_COLORMASK
#ifdef MY_EYEMODE
	ROUGHNESS *= min(1.0 - mask.g*0.9, 1.0);
	EMISSION = albedo_tex.rgb*color_mask_g.rgb*mask.g;
	EMISSION.rgb = mix(EMISSION.rgb, albedo_tex.rgb*color_mask_r.rgb, mask.r*0.5);
	//EMISSION.rgb *= 2.0;
#endif
#endif

	// Normal Map: Enabled
	NORMAL_MAP = texture(texture_normal, base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

#ifdef MY_RIMLIGHT
	// Rim: Enabled
	//vec2 rim_tex = texture(texture_rim, base_uv).xy;
	RIM = rim;// * rim_tex.x;// - basic_fresnel*2.5;
	RIM_TINT = rim_tint;// * rim_tex.y;
#endif

	// Ambient Occlusion: Enabled
	AO = orm_tex.r * ao_mult;
	AO_LIGHT_AFFECT = ao_light_affect;

#ifdef MY_SUBSURFACESCATTER
	// Subsurface Scattering: Enabled
	//float sss_tex = texture(texture_subsurface_scattering, base_uv).r;
	SSS_STRENGTH = subsurface_scattering_strength;// * sss_tex;
#endif

#ifdef MY_BACKLIGHT
	// Backlight: Enabled
	//vec3 backlight_tex = texture(texture_backlight, base_uv).rgb;
	BACKLIGHT = (backlight.rgb);// + backlight_tex);
#endif

#ifdef MY_ALPHAMASK
	vec4 alpha_tex = texture(texture_alpha, base_uv);
	ALPHA *= (1.0 - alpha_tex.r);
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
#endif

#ifdef MY_ALPHASUPPORT
	ALPHA *= albedo_tex.a*albedo.a;
#endif

#ifdef MY_GLOBALDETAILMAP
	vec3 detail_norm_tex_global = texture(texture_detail_normal_global, base_uv*detail_normal_scale).rgb; // base_uv
	detail_norm_tex_global = mix(vec3(0.5,0.5,1.0), detail_norm_tex_global, detail_normal_blend);
	NORMAL_MAP = udm_normal_blend(NORMAL_MAP, detail_norm_tex_global); //_simple_normal_blend
#endif

#ifdef MY_GLOBALDETAILROUGHMAP
	vec3 detail_rough_tex_global = texture(texture_detail_rough_global, base_uv*detail_rough_scale).rgb; // base_uv
	detail_rough_tex_global.g = detail_rough_tex_global.g * (detail_rough_blend) + 1.0 - detail_rough_blend;

	//detail_rough_tex_global.rgb = mix(vec3(0.5,0.5,1.0), detail_norm_tex_global, detail_normal_blend);
	//NORMAL_MAP = udm_normal_blend(NORMAL_MAP, detail_norm_tex_global); //_simple_normal_blend
	ROUGHNESS *= detail_rough_tex_global.g;
#endif

}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_d17xq"]
render_priority = 0
shader = SubResource("Shader_uprqo")
shader_parameter/albedo = Color(0.86, 0.4386, 0.4386, 1)
shader_parameter/texture_albedo = ExtResource("6_e373p")
shader_parameter/texture_orm = ExtResource("8_uprqo")
shader_parameter/roughness = 1.0
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_normal = ExtResource("7_sj2jt")
shader_parameter/normal_scale = 1.0
shader_parameter/ao_light_affect = 0.0
shader_parameter/ao_mult = 1.0
shader_parameter/subsurface_scattering_strength = 0.5
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
script = ExtResource("5_87rsm")
backlight = false
freshnel = false
rimlight = false
subsurfaceScattering = true
alphaMask = false
uvBasedDiscard = false
alphaSupport = false
globalDetailMask = false
globalDetailRoughMask = false
colorMask = false
eyeMode = false
doubleSided = false
toonShading = false
clearCache = false
metadata/_custom_type_script = ExtResource("5_87rsm")

[sub_resource type="Shader" id="Shader_d17xq"]
code = "shader_type spatial;

#define MY_RIMLIGHT
#define MY_ALPHASUPPORT


render_mode
blend_mix,
#ifdef MY_ALPHASUPPORT
depth_prepass_alpha,
#endif
depth_draw_opaque,
#ifdef MY_TOONSHADING
diffuse_toon,
#else
diffuse_burley,
#endif
specular_schlick_ggx,
#ifdef MY_SUBSURFACESCATTER
sss_mode_skin,
#endif
#ifdef MY_DOUBLESIDED
cull_disabled
#else
cull_back
#endif
;

uniform vec4 albedo : source_color = vec4(1.0);
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform sampler2D texture_orm : hint_roughness_g, filter_linear_mipmap, repeat_enable;

uniform float roughness : hint_range(0.0, 1.0) = 1.0;

uniform float specular : hint_range(0.0, 1.0, 0.01) = 0.5;
uniform float metallic : hint_range(0.0, 1.0, 0.01) = 1.0;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0) = 1.0;

#ifdef MY_ALPHAMASK
uniform sampler2D texture_alpha : hint_default_black, filter_nearest, repeat_enable;
uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.001) = 0.5;
#endif

#ifdef MY_RIMLIGHT
uniform float rim : hint_range(0.0, 3.0, 0.01) = 1.0;
uniform float rim_tint : hint_range(0.0, 1.0, 0.01) = 0.5;
//uniform sampler2D texture_rim : hint_default_white, filter_linear_mipmap, repeat_enable;
#endif

uniform float ao_light_affect : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform float ao_mult : hint_range(0.0, 1.0, 0.01) = 1.0;

#ifdef MY_SUBSURFACESCATTER
uniform float subsurface_scattering_strength : hint_range(0.0, 1.0, 0.01) = 0.5;
//uniform sampler2D texture_subsurface_scattering : hint_default_white, filter_linear_mipmap, repeat_enable;
#endif

#ifdef MY_BACKLIGHT
uniform vec4 backlight : source_color = vec4(0.3, 0.24, 0.24, 1.0);
//uniform sampler2D texture_backlight : hint_default_black, filter_linear_mipmap, repeat_enable;
#endif

uniform vec3 uv1_scale = vec3(1.0, 1.0, 1.0);
uniform vec3 uv1_offset = vec3(0.0);
//uniform vec3 uv2_scale = vec3(1.0, 1.0, 1.0);
//uniform vec3 uv2_offset = vec3(0.0);

#ifdef MY_FRESHNEL
uniform float freshnel_width : hint_range(0.0, 30.0, 0.1) = 5.0;
uniform float freshnel_mod : hint_range(0.0, 0.3, 0.01) = 0.1;
uniform vec3 freshnel_color : source_color = vec3(0.05,0.02,0.02);

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view))-freshnel_mod, 0.0, 1.0 )), amount);
}
#endif

//#define MY_COLORMASK
#ifdef MY_COLORMASK
uniform sampler2D texture_color_mask : hint_default_transparent, filter_linear_mipmap, repeat_enable;
uniform vec4 color_mask_r : source_color = vec4(1.0, 0.0, 0.0, 1.0);
uniform vec4 color_mask_g : source_color = vec4(0.0, 1.0, 0.0, 1.0);
uniform vec4 color_mask_b : source_color = vec4(0.0, 0.0, 1.0, 1.0);
#endif

//#define MY_GLOBALDETAILROUGHMAP
#ifdef MY_GLOBALDETAILROUGHMAP
uniform sampler2D texture_detail_rough_global : hint_roughness_b, filter_linear_mipmap, repeat_enable;
uniform float detail_rough_scale : hint_range(0.01, 100.0, 0.01) = 1.0;
uniform float detail_rough_blend : hint_range(0.01, 3.0, 0.01) = 1.0;

#endif
//#define MY_GLOBALDETAILMAP
#ifdef MY_GLOBALDETAILMAP
uniform sampler2D texture_detail_normal_global : hint_normal, filter_linear_mipmap, repeat_enable;
uniform float detail_normal_scale : hint_range(0.01, 100.0, 0.01) = 1.0;
uniform float detail_normal_blend : hint_range(0.01, 3.0, 0.01) = 1.0;

vec3 _simple_normal_blend(vec3 b, vec3 d) {
	return vec3(b.xy + d.xy - 0.5, 1.0);
}

vec3 udm_normal_blend(vec3 b, vec3 d) {
	b = b*2.0 - 1.0;
	d = d*2.0 - 1.0;
	vec3 r = vec3(b.xy + d.xy, b.z);
	r = normalize(r);
	return r*0.5 + 0.5;
}
#endif

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;

#ifdef MY_UV_BASED_DISCARD
	if(base_uv.y < 0.0)
		discard;
#endif

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	vec4 orm_tex = texture(texture_orm, base_uv);

	ALBEDO = albedo.rgb * albedo_tex.rgb;

#ifdef MY_COLORMASK
	vec4 mask = texture(texture_color_mask, base_uv);
{
	float maskF = mask.r + mask.g + mask.b;
	maskF = max(maskF, 1.0);
	mask.rgb /= maskF;

	vec4 color_r = color_mask_r;
	vec4 color_g = color_mask_g;
	vec4 color_b = color_mask_b;

    vec4 result = vec4(0.0);
	result += mask.r*color_r*color_r.a;
	result += mask.g*color_g*color_g.a;
	result += mask.b*color_b*color_b.a;

	result.a *= mask.a;

	vec4 mask_color = texture(texture_color_mask, base_uv);

	ALBEDO.rgb = mix(ALBEDO.rgb, result.rgb, result.a);

	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_r, mask_color.r);
	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_g, mask_color.g);
	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_b, mask_color.b);
}
#endif

#ifdef MY_FRESHNEL
	// Freshnel: Enabled
	float basic_fresnel = fresnel(freshnel_width, NORMAL, VIEW);
	basic_fresnel = smoothstep(0.0, 1.0, basic_fresnel)*1.0; //0.5 magic number seems to give the most intuitive control
	ALBEDO = mix(ALBEDO, freshnel_color, basic_fresnel);// - basic_fresnel;
#endif

	METALLIC = orm_tex.b * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	ROUGHNESS = orm_tex.g * roughness;

#ifdef MY_COLORMASK
#ifdef MY_EYEMODE
	ROUGHNESS *= min(1.0 - mask.g*0.9, 1.0);
	EMISSION = albedo_tex.rgb*color_mask_g.rgb*mask.g;
	EMISSION.rgb = mix(EMISSION.rgb, albedo_tex.rgb*color_mask_r.rgb, mask.r*0.5);
	//EMISSION.rgb *= 2.0;
#endif
#endif

	// Normal Map: Enabled
	NORMAL_MAP = texture(texture_normal, base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

#ifdef MY_RIMLIGHT
	// Rim: Enabled
	//vec2 rim_tex = texture(texture_rim, base_uv).xy;
	RIM = rim;// * rim_tex.x;// - basic_fresnel*2.5;
	RIM_TINT = rim_tint;// * rim_tex.y;
#endif

	// Ambient Occlusion: Enabled
	AO = orm_tex.r * ao_mult;
	AO_LIGHT_AFFECT = ao_light_affect;

#ifdef MY_SUBSURFACESCATTER
	// Subsurface Scattering: Enabled
	//float sss_tex = texture(texture_subsurface_scattering, base_uv).r;
	SSS_STRENGTH = subsurface_scattering_strength;// * sss_tex;
#endif

#ifdef MY_BACKLIGHT
	// Backlight: Enabled
	//vec3 backlight_tex = texture(texture_backlight, base_uv).rgb;
	BACKLIGHT = (backlight.rgb);// + backlight_tex);
#endif

#ifdef MY_ALPHAMASK
	vec4 alpha_tex = texture(texture_alpha, base_uv);
	ALPHA *= (1.0 - alpha_tex.r);
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
#endif

#ifdef MY_ALPHASUPPORT
	ALPHA *= albedo_tex.a*albedo.a;
#endif

#ifdef MY_GLOBALDETAILMAP
	vec3 detail_norm_tex_global = texture(texture_detail_normal_global, base_uv*detail_normal_scale).rgb; // base_uv
	detail_norm_tex_global = mix(vec3(0.5,0.5,1.0), detail_norm_tex_global, detail_normal_blend);
	NORMAL_MAP = udm_normal_blend(NORMAL_MAP, detail_norm_tex_global); //_simple_normal_blend
#endif

#ifdef MY_GLOBALDETAILROUGHMAP
	vec3 detail_rough_tex_global = texture(texture_detail_rough_global, base_uv*detail_rough_scale).rgb; // base_uv
	detail_rough_tex_global.g = detail_rough_tex_global.g * (detail_rough_blend) + 1.0 - detail_rough_blend;

	//detail_rough_tex_global.rgb = mix(vec3(0.5,0.5,1.0), detail_norm_tex_global, detail_normal_blend);
	//NORMAL_MAP = udm_normal_blend(NORMAL_MAP, detail_norm_tex_global); //_simple_normal_blend
	ROUGHNESS *= detail_rough_tex_global.g;
#endif

}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_urrwb"]
frequency = 0.0741
domain_warp_enabled = true

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_4q13s"]
width = 128
height = 128
seamless = true
as_normal_map = true
bump_strength = 0.3
noise = SubResource("FastNoiseLite_urrwb")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_e373p"]
render_priority = 0
shader = SubResource("Shader_d17xq")
shader_parameter/albedo = Color(0.73, 0.4307, 0.4307, 1)
shader_parameter/texture_albedo = ExtResource("5_fu5fk")
shader_parameter/roughness = 0.514
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_normal = SubResource("NoiseTexture2D_4q13s")
shader_parameter/normal_scale = 1.0
shader_parameter/rim = 1.0
shader_parameter/rim_tint = 0.5
shader_parameter/ao_light_affect = 0.0
shader_parameter/ao_mult = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
script = ExtResource("5_87rsm")
backlight = false
freshnel = false
rimlight = true
subsurfaceScattering = false
alphaMask = false
uvBasedDiscard = false
alphaSupport = true
globalDetailMask = false
globalDetailRoughMask = false
colorMask = false
eyeMode = false
doubleSided = false
toonShading = false
clearCache = false
metadata/_custom_type_script = ExtResource("5_87rsm")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_4q13s"]
transparency = 4
albedo_texture = ExtResource("6_urrwb")

[node name="FeminineBody" instance=ExtResource("1_y7j6w")]
script = ExtResource("2_3rtfg")
bodyMat = ExtResource("4_f00mj")

[node name="rig" parent="." index="0" node_paths=PackedStringArray("skeletonMeshes")]
script = ExtResource("2_i5sai")
attachPoint = "body"
skeletonMeshes = [NodePath("Skeleton3D/Body"), NodePath("Skeleton3D/DigiLegs"), NodePath("Skeleton3D/MaleCrotch"), NodePath("Skeleton3D/NeckConnector"), NodePath("Skeleton3D/NeckConnectorFurry"), NodePath("Skeleton3D/Nipples"), NodePath("Skeleton3D/PlantiLegs"), NodePath("Skeleton3D/PubicHair"), NodePath("Skeleton3D/FemaleCrotch"), NodePath("Skeleton3D/NeckConnectorFurryFull")]

[node name="Body" parent="rig/Skeleton3D" index="0"]
surface_material_override/0 = ExtResource("4_f00mj")

[node name="DigiLegs" parent="rig/Skeleton3D" index="1"]
unique_name_in_owner = true
visible = false
surface_material_override/0 = ExtResource("4_f00mj")

[node name="FemaleCrotch" parent="rig/Skeleton3D" index="2"]
surface_material_override/0 = ExtResource("4_f00mj")
surface_material_override/1 = SubResource("ShaderMaterial_d17xq")

[node name="MaleCrotch" parent="rig/Skeleton3D" index="3"]
visible = false
surface_material_override/0 = ExtResource("4_f00mj")
surface_material_override/1 = SubResource("ShaderMaterial_d17xq")

[node name="NeckConnector" parent="rig/Skeleton3D" index="4"]
unique_name_in_owner = true
visible = false
surface_material_override/0 = ExtResource("4_f00mj")

[node name="NeckConnectorFurry" parent="rig/Skeleton3D" index="5"]
unique_name_in_owner = true
surface_material_override/0 = ExtResource("4_f00mj")

[node name="NeckConnectorFurryFull" parent="rig/Skeleton3D" index="6"]
visible = false

[node name="Nipples" parent="rig/Skeleton3D" index="7"]
lod_bias = 100.0
blend_shapes/NipplesNormal = 1.0
blend_shapes/NipplesAreolas = 0.38462
surface_material_override/0 = SubResource("ShaderMaterial_e373p")

[node name="PlantiLegs" parent="rig/Skeleton3D" index="8"]
unique_name_in_owner = true
surface_material_override/0 = ExtResource("4_f00mj")

[node name="PubicHair" parent="rig/Skeleton3D" index="9"]
lod_bias = 100.0
surface_material_override/0 = SubResource("StandardMaterial3D_4q13s")

[node name="BodyLayeredTexture" parent="." index="1" instance=ExtResource("11_sj2jt")]
unique_name_in_owner = true
resolution = Vector2i(2048, 2048)
graphicsOptionAutoScale = 1

[node name="VaginaHoleTracker" type="Node" parent="." index="2" node_paths=PackedStringArray("dollPart", "crotchMeshes")]
script = ExtResource("12_uprqo")
dollPart = NodePath("..")
crotchMeshes = [NodePath("../rig/Skeleton3D/FemaleCrotch"), NodePath("../rig/Skeleton3D/PubicHair")]
openShapekeyMult = 2.2
pullShapekeyMult = 0.5

[node name="AnusHoleTracker" type="Node" parent="." index="3" node_paths=PackedStringArray("dollPart", "crotchMeshes")]
script = ExtResource("12_uprqo")
holeType = 1
dollPart = NodePath("..")
crotchMeshes = [NodePath("../rig/Skeleton3D/FemaleCrotch"), NodePath("../rig/Skeleton3D/PubicHair"), NodePath("../rig/Skeleton3D/MaleCrotch")]
openShapekey = "AnusOpenedWide"
openShapekeyMult = 2.0
pullShapekey = "AnusPull"
